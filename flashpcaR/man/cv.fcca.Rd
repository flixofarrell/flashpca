% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcca.R
\name{cv.fcca}
\alias{cv.fcca}
\title{Cross-validation for the FCCA model.}
\usage{
cv.fcca(
  X,
  Y,
  lambda1 = 0,
  lambda2 = 0,
  gamma1 = 0,
  gamma2 = 0,
  ndim = 1,
  nfolds = 10,
  folds = NULL,
  check_sign = TRUE,
  return_models = FALSE,
  svd_tol = 1e-12,
  verbose = FALSE,
  maxiter = 1000,
  parallel = FALSE
)
}
\arguments{
\item{X}{An n by p numeric matrix. Note: PLINK data is currently not supported.}

\item{Y}{An n by k numeric matrix.}

\item{lambda1}{Numeric vector. Non-negative L1 penalty on canonical vectors of X.}

\item{lambda2}{Numeric vector. Non-negative L1 penalty on canonical vectors of Y.}

\item{gamma1}{Numeric vector. Non-negative L2 penalty on X.}

\item{gamma2}{Numeric vector. Non-negative L2 penalty on Y.}

\item{ndim}{Integer. Positive number of canonical vectors to compute.}

\item{nfolds}{Integer. Number of cross-validation folds.}

\item{folds}{Integer. The fold identifiers. Overrides the `nfolds'
parameter.}

\item{check_sign}{Logical. Whether to check and correct the sign
of the singular vectors to prevent sign flipping in cross-validation.}

\item{return_models}{Logical. Whether to return all trained models.}

\item{svd_tol}{Numeric. Tolerance under which to truncate singular values of X and Y.}

\item{verbose}{Logical.}

\item{maxiter}{Integer. Maximum number of iterations.}

\item{parallal}{Logical. Whether to use parallelisation. Requires the use
of the \code{foreach} package.}
}
\value{
an \code{cv.fcca} object with the following components:

\describe{
   \item{ndim:} Number of dimensions.
   \item{lambda1:} Vector of lambda1 penalties.
   \item{lambda2:} Vector of lambda2 penalties.
   \item{gamma1:} Vector of gamma1 penalties.
   \item{gamma2:} Vector of gamma2 penalties.
}
}
\description{
Cross-validation for the FCCA model.
}
\details{
Standardisation is done once for X and Y
}
\examples{

#######################
## HapMap3 chr1 example
data(hm3.chr1)
X <- scale2(hm3.chr1$bed)
n <- nrow(X)
m <- ncol(X)
k <- 10
B <- matrix(rnorm(m * k), m, k)
Y <- X \%*\% B + rnorm(n * k)

r <- cv.fcca(X, Y, ndim=1, nfolds=3,
   lambda1=seq(1e-3, 1e-1, length=5),
   lambda2=seq(1e-4, 0.5, length=3),
   gamma1=10^c(-3, -1),
   gamma2=10^c(-3, -1))

}
\seealso{
\code{\link{fcca}}
}
